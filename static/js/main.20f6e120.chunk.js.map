{"version":3,"sources":["components/Section/Section.jsx","components/Feedback/FeedbackOptions/FeedbackOptions.jsx","components/Feedback/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Section","title","children","className","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","toUpperCase","slice","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","totalBtn","countTotalFeedback","totalFeedback","Object","keys","target","textContent","toLowerCase","prevState","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQASeA,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,0BAASC,UAAU,QAAnB,UACGF,EACAC,MCWUE,EAdS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACE,oBAAIH,UAAU,gBAAd,SACGE,EAAQE,KAAI,SAAAC,GAAM,OACjB,oBAAiBL,UAAU,gBAA3B,SACE,wBAAQM,KAAK,SAASN,UAAU,MAAMO,QAASJ,EAA/C,SAEGE,EAAO,GAAGG,cAAgBH,EAAOI,MAAM,MAHnCJ,WCSFK,EAbI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,8BACE,qBAAIf,UAAU,kBAAd,UACE,qBAAIA,UAAU,kBAAd,mBAAuCW,KACvC,qBAAIX,UAAU,kBAAd,sBAA0CY,KAC1C,qBAAIZ,UAAU,kBAAd,kBAAsCa,KACtC,qBAAIb,UAAU,kBAAd,oBAAwCc,KACxC,qBAAId,UAAU,kBAAd,gCACsBe,EADtB,aCNSC,EADM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGjB,UAAU,eAAb,SAA6BiB,K,MCMpD,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KAEMC,EAAW,CAAEZ,OAAMC,UAASC,OAuB5BW,EAAqB,WACzB,IAAMC,EAAgBd,EAAOC,EAAUC,EAEvC,OAAKY,GACI,GAUX,OACE,sBAAKzB,UAAU,YAAf,UACE,oBAAIA,UAAU,kBAAd,sBACA,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CACEI,QAASwB,OAAOC,KAAKJ,GACrBpB,gBAzCc,SAAC,GAGrB,OAHqD,EAA9ByB,OAAUC,YACHC,eAG5B,IAAK,OACHV,GAAQ,SAAAW,GAAS,OAAIA,EAAY,KACjC,MAEF,IAAK,UACHV,GAAW,SAAAU,GAAS,OAAIA,EAAY,KACpC,MAEF,IAAK,MACHT,GAAO,SAAAS,GAAS,OAAIA,EAAY,KAChC,MAEF,QACE,aA4BF,cAAC,EAAD,CAASjC,MAAM,aAAf,SAC4B,IAAzB0B,IACC,cAAC,EAAD,CAAcP,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOU,IACPT,mBAtBDiB,KAAKC,MAAc,IAAPtB,EAAca,YC1CrCU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.20f6e120.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section className=\"title\">\n    {title}\n    {children}\n  </section>\n);\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div>\n    <ul className=\"feedback_list\">\n      {options.map(option => (\n        <li key={option} className=\"feedback_item\">\n          <button type=\"submit\" className=\"btn\" onClick={onLeaveFeedback}>\n            {/* {option.charAt(0).toUpperCase() + option.slice(1)} */}\n            {option[0].toUpperCase() + option.slice(1)}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <ul className=\"statistics_list\">\n      <li className=\"statistics_item\">Good: {good}</li>\n      <li className=\"statistics_item\">Neutral: {neutral}</li>\n      <li className=\"statistics_item\">Bad: {bad}</li>\n      <li className=\"statistics_item\">Total: {total}</li>\n      <li className=\"statistics_item\">\n        Positive feedback: {positivePercentage}%\n      </li>\n    </ul>\n  </div>\n);\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p className=\"notification\">{message}</p>;\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useState } from 'react';\n\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Feedback/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nimport './App.scss';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const totalBtn = { good, neutral, bad };\n\n  const leaveFeedback = ({ target: { textContent } }) => {\n    const targetBtn = textContent.toLowerCase();\n\n    switch (targetBtn) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    const totalFeedback = good + neutral + bad;\n\n    if (!totalFeedback) {\n      return 0;\n    }\n\n    return totalFeedback;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good * 100) / countTotalFeedback());\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"visually_hidden\">Feedback</h1>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={Object.keys(totalBtn)}\n          onLeaveFeedback={leaveFeedback}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}